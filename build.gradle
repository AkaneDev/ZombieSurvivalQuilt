plugins {
    id 'fabric-loom' version '1.8-SNAPSHOT'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

loom {
    splitEnvironmentSourceSets()

    mods {
        "zombiesurvival" {
            sourceSet sourceSets.main
            sourceSet sourceSets.client
        }
    }
}

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
    mavenCentral() // Ensure you have Maven Central for Fabric dependencies
    maven { url 'https://jitpack.io' } // Add JitPack repository
    maven {
        name = 'BlameJared Maven (CrT / Bookshelf)'
        url = 'https://maven.blamejared.com'
    }
    maven {
        name = 'ParchmentMC'
        url = 'https://maven.parchmentmc.org'
    }
    maven{
        name = 'ladysnake'
        url = 'https://maven.ladysnake.org/releases'
    }
    maven {
        name = "devos one (PortingLib Container)"
        url = "https://mvn.devos.one/releases/"
    }
    maven {
        name = "Jamies White Shirt"
        url = "https://maven.jamieswhiteshirt.com/libs-release"
    }
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
//    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    mappings(loom.layered {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${project.minecraft_version}:${project.parchment_version}@zip")
    })
//    modImplementation("foundry.veil:Veil-fabric-${project.minecraft_version}:${project.veil_version}") {
//        exclude group: "maven.modrinth"
//    }

    modApi "dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cca_version}"
    modApi "dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${project.cca_version}"
    modApi "dev.onyxstudios.cardinal-components-api:cardinal-components-world:${project.cca_version}"

    def portLibModules = project.findProperty('port_lib_modules')?.split(',') ?: []

    portLibModules.each { module ->
        include("io.github.fabricators_of_create.Porting-Lib:${module}:${project.port_lib_version}")
        modApi("io.github.fabricators_of_create.Porting-Lib:${module}:${project.port_lib_version}")
    }
    modImplementation "maven.modrinth:porting_lib:${project.portinglib_ver}"
    modApi "maven.modrinth:porting_lib:${project.portinglib_ver}"
    modImplementation "maven.modrinth:lodestonelib:${project.lodestone_version}"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modApi "dev.onyxstudios.cardinal-components-api:cardinal-components-base:${property("cca_version")}"
    modApi "dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${property("cca_version")}"
    modApi "dev.onyxstudios.cardinal-components-api:cardinal-components-world:${property("cca_version")}"
    compileOnly "maven.modrinth:sodium:${project.sodium_version}"
    compileOnly "maven.modrinth:iris:${project.iris_version}"
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", minecraft_version
    inputs.property "loader_version", loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": minecraft_version,
                "loader_version": loader_version
    }
}

def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        create("mavenJava", MavenPublication) {
            artifactId = project.archives_base_name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
